// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Taskly.Stickers.Data.DataContexts;

#nullable disable

namespace Taskly.Stickers.Data.Migrations
{
    [DbContext(typeof(StickersContext))]
    partial class StickersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Taskly.Stickers.Data.Entities.BoardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Taskly.Stickers.Data.Entities.BoardStickerEntity", b =>
                {
                    b.Property<Guid>("BoardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StickerId")
                        .HasColumnType("uuid");

                    b.HasKey("BoardId", "StickerId");

                    b.HasIndex("StickerId");

                    b.ToTable("BoardsStickers");
                });

            modelBuilder.Entity("Taskly.Stickers.Data.Entities.BoardUserEntity", b =>
                {
                    b.Property<Guid>("BoardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BoardId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BoardsUsers");
                });

            modelBuilder.Entity("Taskly.Stickers.Data.Entities.StickerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasMaxLength(20000)
                        .HasColumnType("character varying(20000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stickers");
                });

            modelBuilder.Entity("Taskly.Stickers.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Taskly.Stickers.Data.Entities.BoardStickerEntity", b =>
                {
                    b.HasOne("Taskly.Stickers.Data.Entities.BoardEntity", "Board")
                        .WithMany("BoardsStickers")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taskly.Stickers.Data.Entities.StickerEntity", "Sticker")
                        .WithMany("BoardsStickers")
                        .HasForeignKey("StickerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Sticker");
                });

            modelBuilder.Entity("Taskly.Stickers.Data.Entities.BoardUserEntity", b =>
                {
                    b.HasOne("Taskly.Stickers.Data.Entities.BoardEntity", "Board")
                        .WithMany("BoardsUsers")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taskly.Stickers.Data.Entities.UserEntity", "User")
                        .WithMany("BoardsUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taskly.Stickers.Data.Entities.StickerEntity", b =>
                {
                    b.HasOne("Taskly.Stickers.Data.Entities.UserEntity", "User")
                        .WithMany("Stickers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taskly.Stickers.Data.Entities.BoardEntity", b =>
                {
                    b.Navigation("BoardsStickers");

                    b.Navigation("BoardsUsers");
                });

            modelBuilder.Entity("Taskly.Stickers.Data.Entities.StickerEntity", b =>
                {
                    b.Navigation("BoardsStickers");
                });

            modelBuilder.Entity("Taskly.Stickers.Data.Entities.UserEntity", b =>
                {
                    b.Navigation("BoardsUsers");

                    b.Navigation("Stickers");
                });
#pragma warning restore 612, 618
        }
    }
}
